// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/docker/docker/api/types"
	mock "github.com/stretchr/testify/mock"
)

// CheckpointAPIClient is an autogenerated mock type for the CheckpointAPIClient type
type CheckpointAPIClient struct {
	mock.Mock
}

// CheckpointCreate provides a mock function with given fields: ctx, container, options
func (_m *CheckpointAPIClient) CheckpointCreate(ctx context.Context, container string, options types.CheckpointCreateOptions) error {
	ret := _m.Called(ctx, container, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.CheckpointCreateOptions) error); ok {
		r0 = rf(ctx, container, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckpointDelete provides a mock function with given fields: ctx, container, options
func (_m *CheckpointAPIClient) CheckpointDelete(ctx context.Context, container string, options types.CheckpointDeleteOptions) error {
	ret := _m.Called(ctx, container, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.CheckpointDeleteOptions) error); ok {
		r0 = rf(ctx, container, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckpointList provides a mock function with given fields: ctx, container, options
func (_m *CheckpointAPIClient) CheckpointList(ctx context.Context, container string, options types.CheckpointListOptions) ([]types.Checkpoint, error) {
	ret := _m.Called(ctx, container, options)

	var r0 []types.Checkpoint
	if rf, ok := ret.Get(0).(func(context.Context, string, types.CheckpointListOptions) []types.Checkpoint); ok {
		r0 = rf(ctx, container, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Checkpoint)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, types.CheckpointListOptions) error); ok {
		r1 = rf(ctx, container, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
